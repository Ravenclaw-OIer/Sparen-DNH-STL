#TouhouDanmakufu[Stage]
#Title["STL Math Test"]
#Text["Unit Testing for stl_math.dnh"]
#ScriptVersion[3]

#include "./../stl_math.dnh"
    
@Initialize {
    ComplementTest;
    //Bitwise NOT is not tested, as it is a wrapper for One's Complement, tested in ComplementTest
    LShiftTest;
    RShiftTest;

    ToBinaryTest;
}

@MainLoop {
    yield;
}

task ComplementTest {
    WriteLog("ComplementTest: Initializing");

    WriteLog("ComplementTest: Part 1");
    ascent(i in -32..32) {
        assert(stl_onescomplement_s(i) == (-1 - i), "Assertion Failed (A1) - Expected " ~ IntToString(-1 - i) ~ " but got " ~ IntToString(stl_onescomplement_s(i)));
    }
    ascent(i in -32..32) {
        assert(stl_onescomplement(i) == (-1 - i), "Assertion Failed (A2) - Expected " ~ IntToString(-1 - i) ~ " but got " ~ IntToString(stl_onescomplement(i)));
    }

    ascent(i in -32..32) {
        assert(stl_onescomplement_s(ToString(i)) == (-1 - i), "Assertion Failed (A3) - Expected " ~ IntToString(-1 - i) ~ " but got " ~ IntToString(stl_onescomplement_s(ToString(i))));
    }
    ascent(i in -32..32) {
        assert(stl_onescomplement(ToString(i)) == (-1 - i), "Assertion Failed (A4) - Expected " ~ IntToString(-1 - i) ~ " but got " ~ IntToString(stl_onescomplement(ToString(i))));
    }

    //Following line should crash Danmakufu with the library's error
    //Comment out when not testing exception handler
    //assert(stl_onescomplement_s("TEST"), "Assertion Failed (B1) - Expected exception");

    WriteLog("ComplementTest: Part 2");
    // When we add the floating point component, ensure that the sign of the floating point component is maintained as well
    ascent(i in -32..32) {
        assert(stl_onescomplement_s(i + 0.001 * i) == (-1 - i), "Assertion Failed (C1) - Expected " ~ IntToString(-1 - i) ~ " but got " ~ IntToString(stl_onescomplement_s(i + 0.001 * i)));
    }

    WriteLog("ComplementTest: All Tests Passed");
}

task LShiftTest {
    WriteLog("LShiftTest: Initializing");

    WriteLog("LShiftTest: Part 1");
    let x = 1; //Left shift by 1 per loop
    let y = 1; //Set to 1 left shifted by i per loop
    ascent(i in 0..64) {
        WriteLog("LShiftTest: i, x, y: " ~ ToString(i) ~ "; " ~ ToString(x) ~ "; " ~ ToString(y));
        assert(x == 1 * 2^i, "Assertion Failed (A1X) - Expected " ~ IntToString(1 * 2^i) ~ " but got " ~ IntToString(x));
        assert(y == 1 * 2^i, "Assertion Failed (A1Y) - Expected " ~ IntToString(1 * 2^i) ~ " but got " ~ IntToString(y));
        x = stl_lshift(x, 1);
        y = stl_lshift(1, i + 1);
    }

    let x2 = 1; //Left shift by 1 per loop
    let y2 = 1; //Set to 1 left shifted by j per loop
    ascent(j in 0..64) {
        WriteLog("LShiftTest: j, x2, y2: " ~ ToString(j) ~ "; " ~ ToString(x2) ~ "; " ~ ToString(y2));
        assert(x2 == 1 * 2^j, "Assertion Failed (A2X) - Expected " ~ IntToString(1 * 2^j) ~ " but got " ~ IntToString(x2));
        assert(y2 == 1 * 2^j, "Assertion Failed (A2Y) - Expected " ~ IntToString(1 * 2^j) ~ " but got " ~ IntToString(y2));
        x2 = stl_lshift_s(x2, 1);
        y2 = stl_lshift_s(1, j + 1);
    }

    WriteLog("LShiftTest: All Tests Passed");
}

task RShiftTest {
    WriteLog("RShiftTest: Initializing");

    WriteLog("RShiftTest: Part 1");
    let x = 1024; //Right shift by 1 per loop
    let y = 1024; //Set to 1 right shifted by i per loop
    ascent(i in 0..10) {
        WriteLog("RShiftTest: i, x, y: " ~ ToString(i) ~ "; " ~ ToString(x) ~ "; " ~ ToString(y));
        assert(x == 1024 / 2^i, "Assertion Failed (A1X) - Expected " ~ IntToString(1024 / 2^i) ~ " but got " ~ IntToString(x));
        assert(y == 1024 / 2^i, "Assertion Failed (A1Y) - Expected " ~ IntToString(1024 / 2^i) ~ " but got " ~ IntToString(y));
        x = stl_rshift(x, 1);
        y = stl_rshift(1024, i + 1);
    }

    let x2 = 1024; //Right shift by 1 per loop
    let y2 = 1024; //Set to 1 right shifted by j per loop
    ascent(j in 0..10) {
        WriteLog("RShiftTest: j, x2, y2: " ~ ToString(j) ~ "; " ~ ToString(x2) ~ "; " ~ ToString(y2));
        assert(x2 == 1024 / 2^j, "Assertion Failed (A2X) - Expected " ~ IntToString(1024 / 2^j) ~ " but got " ~ IntToString(x2));
        assert(y2 == 1024 / 2^j, "Assertion Failed (A2Y) - Expected " ~ IntToString(1024 / 2^j) ~ " but got " ~ IntToString(y2));
        x2 = stl_rshift_s(x2, 1);
        y2 = stl_rshift_s(1024, j + 1);
    }

    WriteLog("RShiftTest: Part 2");
    //1, 3, 7, 15, 31, 63, etc. should right shift to each other to mimic behavior of python 3
    let x3 = 63; //Right shift by 1 per loop
    let y3 = 63; //Set to 1 right shifted by j per loop
    ascent(k in 0..6) {
        WriteLog("RShiftTest: k, x3, y3: " ~ ToString(k) ~ "; " ~ ToString(x3) ~ "; " ~ ToString(y3));
        assert(x3 == 64 / 2^k - 1, "Assertion Failed (B1X) - Expected " ~ IntToString(64 / 2^k) ~ " but got " ~ IntToString(x3));
        assert(y3 == 64 / 2^k - 1, "Assertion Failed (B1Y) - Expected " ~ IntToString(64 / 2^k) ~ " but got " ~ IntToString(y3));
        x3 = stl_rshift_s(x3, 1);
        y3 = stl_rshift_s(63, k + 1);
    }

    WriteLog("RShiftTest: Part 3");
    ascent(l in -30..0) {
        assert(stl_rshift_s(l, 1) == ceil(l/2), "Assertion Failed (C1X) - Expected " ~ IntToString(ceil(l/2)) ~ " but got " ~ IntToString(stl_rshift_s(l, 1)));
        assert(stl_rshift(l, 1) == ceil(l/2), "Assertion Failed (C1Y) - Expected " ~ IntToString(ceil(l/2)) ~ " but got " ~ IntToString(stl_rshift(l, 1)));
    }

    WriteLog("RShiftTest: All Tests Passed");
}

task ToBinaryTest {
    WriteLog("ToBinaryTest: Initializing");

    /*ascent(i in 0..32) {
        WriteLog("ToBinaryTest: " ~ IntToString(i) ~ " -> " ~ stl_tobinary(i));
    }*/

    WriteLog("ToBinaryTest: Part 1");
    assert(stl_tobinary(0) == "0", "Assertion Failed (A0) - Expected 0 but got " ~ stl_tobinary(0));
    assert(stl_tobinary(1) == "1", "Assertion Failed (A1) - Expected 1 but got " ~ stl_tobinary(1));
    assert(stl_tobinary(2) == "10", "Assertion Failed (A2) - Expected 10 but got " ~ stl_tobinary(2));
    assert(stl_tobinary(3) == "11", "Assertion Failed (A3) - Expected 11 but got " ~ stl_tobinary(3));
    assert(stl_tobinary(4) == "100", "Assertion Failed (A4) - Expected 100 but got " ~ stl_tobinary(4));
    assert(stl_tobinary(5) == "101", "Assertion Failed (A5) - Expected 101 but got " ~ stl_tobinary(5));
    assert(stl_tobinary(6) == "110", "Assertion Failed (A6) - Expected 110 but got " ~ stl_tobinary(6));
    assert(stl_tobinary(7) == "111", "Assertion Failed (A7) - Expected 111 but got " ~ stl_tobinary(7));
    assert(stl_tobinary(8) == "1000", "Assertion Failed (A8) - Expected 1000 but got " ~ stl_tobinary(8));
    assert(stl_tobinary(9) == "1001", "Assertion Failed (A9) - Expected 1001 but got " ~ stl_tobinary(9));
    assert(stl_tobinary(10) == "1010", "Assertion Failed (A10) - Expected 1010 but got " ~ stl_tobinary(10));
    assert(stl_tobinary(11) == "1011", "Assertion Failed (A11) - Expected 1011 but got " ~ stl_tobinary(11));
    assert(stl_tobinary(12) == "1100", "Assertion Failed (A12) - Expected 1100 but got " ~ stl_tobinary(12));
    assert(stl_tobinary(13) == "1101", "Assertion Failed (A13) - Expected 1101 but got " ~ stl_tobinary(13));
    assert(stl_tobinary(14) == "1110", "Assertion Failed (A14) - Expected 1110 but got " ~ stl_tobinary(14));
    assert(stl_tobinary(15) == "1111", "Assertion Failed (A15) - Expected 1111 but got " ~ stl_tobinary(15));
    assert(stl_tobinary(16) == "10000", "Assertion Failed (A16) - Expected 10000 but got " ~ stl_tobinary(16));
    assert(stl_tobinary(2147483647) == "1111111111111111111111111111111", "Assertion Failed (A1X) - Expected 1111111111111111111111111111111 but got " ~ stl_tobinary(2147483647)); // max int32
    assert(stl_tobinary(281474976710655) == "111111111111111111111111111111111111111111111111", "Assertion Failed (A2X) - Expected 111111111111111111111111111111111111111111111111 but got " ~ stl_tobinary(281474976710655)); // max int48
    assert(stl_tobinary(9007199254740991) == "11111111111111111111111111111111111111111111111111111", "Assertion Failed (A3X) - Expected 11111111111111111111111111111111111111111111111111111 but got " ~ stl_tobinary(9007199254740991)); // 2^53 - 1
    assert(stl_tobinary(9999999999999998) == "100011100001101111001001101111110000001111111111111110", "Assertion Failed (A4X) - Expected 100011100001101111001001101111110000001111111111111110 but got " ~ stl_tobinary(9999999999999998));

    WriteLog("ToBinaryTest: Part 2");
    assert(stl_tobinary_s(0) == "0", "Assertion Failed (A0) - Expected 0 but got " ~ stl_tobinary_s(0));
    assert(stl_tobinary_s(1) == "1", "Assertion Failed (A1) - Expected 1 but got " ~ stl_tobinary_s(1));
    assert(stl_tobinary_s(2) == "10", "Assertion Failed (A2) - Expected 10 but got " ~ stl_tobinary_s(2));
    assert(stl_tobinary_s(3) == "11", "Assertion Failed (A3) - Expected 11 but got " ~ stl_tobinary_s(3));
    assert(stl_tobinary_s(4) == "100", "Assertion Failed (A4) - Expected 100 but got " ~ stl_tobinary_s(4));
    assert(stl_tobinary_s(5) == "101", "Assertion Failed (A5) - Expected 101 but got " ~ stl_tobinary_s(5));
    assert(stl_tobinary_s(6) == "110", "Assertion Failed (A6) - Expected 110 but got " ~ stl_tobinary_s(6));
    assert(stl_tobinary_s(7) == "111", "Assertion Failed (A7) - Expected 111 but got " ~ stl_tobinary_s(7));
    assert(stl_tobinary_s(8) == "1000", "Assertion Failed (A8) - Expected 1000 but got " ~ stl_tobinary_s(8));
    assert(stl_tobinary_s(9) == "1001", "Assertion Failed (A9) - Expected 1001 but got " ~ stl_tobinary_s(9));
    assert(stl_tobinary_s(10) == "1010", "Assertion Failed (A10) - Expected 1010 but got " ~ stl_tobinary_s(10));
    assert(stl_tobinary_s(11) == "1011", "Assertion Failed (A11) - Expected 1011 but got " ~ stl_tobinary_s(11));
    assert(stl_tobinary_s(12) == "1100", "Assertion Failed (A12) - Expected 1100 but got " ~ stl_tobinary_s(12));
    assert(stl_tobinary_s(13) == "1101", "Assertion Failed (A13) - Expected 1101 but got " ~ stl_tobinary_s(13));
    assert(stl_tobinary_s(14) == "1110", "Assertion Failed (A14) - Expected 1110 but got " ~ stl_tobinary_s(14));
    assert(stl_tobinary_s(15) == "1111", "Assertion Failed (A15) - Expected 1111 but got " ~ stl_tobinary_s(15));
    assert(stl_tobinary_s(16) == "10000", "Assertion Failed (A16) - Expected 10000 but got " ~ stl_tobinary_s(16));
}